{"backend_state":"init","connection_file":"/projects/7a0c9ef7-3361-4399-8d40-1da8ddeb76b0/.local/share/jupyter/runtime/kernel-eac30e76-b3a6-4384-8e0f-a580259150a4.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"name":"intro_to_python_new.ipynb","provenance":[]},"interpreter":{"hash":"08210294964727e4010dccc398c44f22b92a2e77e2aceea574ad21eae77cd8e8"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"},"orig_nbformat":4},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0e11fc","input":"","metadata":{"id":"QwKGjg-kdZec"},"pos":135,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"10d310","input":"","pos":69,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"3c6a01","input":"","metadata":{"id":"oXWWtLXKWETb"},"pos":144,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"542067","input":"","metadata":{"id":"Jd4fHn0RdZAA"},"pos":134,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"68834f","input":"","metadata":{"id":"boXBMR5fdZZQ"},"pos":136,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bdb199","input":"","metadata":{"id":"hhV1R2lRWETT"},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e47f50","input":"","metadata":{"id":"OmxsoFTkdZSw"},"pos":137,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"209fc1","input":"print(my_list[0], my_list[1],my_list[2],my_list[3], my_list[4])","output":{"0":{"name":"stdout","output_type":"stream","text":"1 2 3 4 5\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":102,"id":"9c34ed","input":"input_list = list()\nfor i in range(3):\n    input_value = input(\"Enter value: \")\n    input_list.append(input_value)\nprint(input_list[0])\nprint(input_list[1])\nprint(input_list[2])","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Enter value: "},"output_type":"stream"},"1":{"name":"input","opts":{"password":false,"prompt":"Enter value: "},"output_type":"stream"},"2":{"name":"input","opts":{"password":false,"prompt":"Enter value: "},"output_type":"stream"}}},"id":"jgdflQ_cWETV"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Enter value: "},"output_type":"stream"},"1":{"name":"input","opts":{"password":false,"prompt":"Enter value: "},"output_type":"stream"},"2":{"name":"input","opts":{"password":false,"prompt":"Enter value: "},"output_type":"stream"},"3":{"name":"stdout","output_type":"stream","text":"appk\n\nbananns\n","value":""}},"pos":72,"type":"cell"}
{"cell_type":"code","exec_count":108,"id":"6d03e7","input":"def x(a, b):\n    c= a*b\n    if c > 0:\n        return True\n    else:\n        return False\nx(1,0)\n    \n    ","metadata":{"id":"k8HT2BY_WETU"},"output":{"0":{"data":{"text/plain":"False"},"exec_count":108,"output_type":"execute_result"}},"pos":67,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"aa8a7e","input":"for number in my_list:\n  print(number)","metadata":{"id":"Acmm10LWWETQ"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n4\n5\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"3ff60c","input":"for i in range(5): # range functions the same here as the list [0,1,2,3,4,5]\n    print('i = ', i)","metadata":{"id":"WLXs-MoqWETQ"},"output":{"0":{"name":"stdout","output_type":"stream","text":"i =  0\ni =  1\ni =  2\ni =  3\ni =  4\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"9acc90","input":"i = 0\nwhile i < 5:\n    print(\"Hello World\")\n    i = i + 1","metadata":{"id":"V_fdS_DJWETR"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Hello World\nHello World\nHello World\nHello World\nHello World\n"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"a0e654","input":"a = 1\nb = 2\nif a > b:\n    print(\"a is greater than b\")","metadata":{"id":"EwcnkIeoWETR"},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"67feaa","input":"a = 1\nb = 2\nif a > b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is less than a\")","metadata":{"id":"sABfDxlyWETR"},"output":{"0":{"name":"stdout","output_type":"stream","text":"b is less than a\n"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"ee82de","input":"a = 1\nb = 1\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a equals b\")\nelse:\n    print(\"b is less than a\")","metadata":{"id":"uAc29mLWWETS"},"output":{"0":{"name":"stdout","output_type":"stream","text":"a equals b\n"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"da841d","input":"def my_first_function():\n    print('Hello world')","metadata":{"id":"VYPZ9zg0WETT"},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"f8dee8","input":"my_first_function()","metadata":{"id":"I-2CMuWEWETT"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world\n"}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"0d0d4b","input":"def add_numbers(a, b, c):\n    total = a + b + c\n    print(total)","metadata":{"id":"rMUJh9aMWETT"},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"55e595","input":"d = a + b\nd","metadata":{"id":"HnvmeRonWETF"},"output":{"0":{"data":{"text/plain":"3"},"exec_count":2,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"36ae69","input":"add_numbers(1, 2, 3)","metadata":{"id":"m5u-bpJbWETU"},"output":{"0":{"name":"stdout","output_type":"stream","text":"6\n"}},"pos":61,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"27d6ec","input":"def add_numbers(a, b, c):\n    total = a + b + c\n    return total","metadata":{"id":"_ewVPeqGWETU"},"pos":63,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"bbf8d0","input":"out = add_numbers(1, 2, 3)\nout","metadata":{"id":"rEjtzbruWETU"},"output":{"0":{"data":{"text/plain":"6"},"exec_count":22,"output_type":"execute_result"}},"pos":64,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"a4cd16","input":"import pandas as pd","metadata":{"id":"DWj1cXWEWETX"},"pos":77,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"a58482","input":"data = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\ndata","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"q0bHiHT_WETX","outputId":"c44583bb-a638-44d8-851c-b3f940d67e7d"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9"},"exec_count":24,"output_type":"execute_result"}},"pos":79,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"b3072f","input":"data.head(2)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"MqnHQnerWETX","outputId":"7efda83e-5948-40d2-cbb2-5488b0194bc4"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\n0  1  4  7\n1  2  5  8"},"exec_count":25,"output_type":"execute_result"}},"pos":81,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"057422","input":"data.tail(1)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"3NpxaFowWETX","outputId":"a35c5ce8-ee2b-4c02-e423-409e8b2c1b07"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\n2  3  6  9"},"exec_count":26,"output_type":"execute_result"}},"pos":82,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"a7aca9","input":"data['A']","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tRU3vf1AWETY","outputId":"6d15ec8b-5b3f-4130-a782-85db4534ee38"},"output":{"0":{"data":{"text/plain":"0    1\n1    2\n2    3\nName: A, dtype: int64"},"exec_count":27,"output_type":"execute_result"}},"pos":84,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"807831","input":"# Gives you the names of all of the columns\ndata.columns","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dwnOhYE9WETY","outputId":"b2e44c8e-48db-4cee-ac69-72276130c488"},"output":{"0":{"data":{"text/plain":"Index(['A', 'B', 'C'], dtype='object')"},"exec_count":28,"output_type":"execute_result"}},"pos":86,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"84cd55","input":"# Tells you more about what is stored in those columns\ndata.info()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7EgZCFgJWETY","outputId":"4a9a52ee-8551-430a-f7b8-992f9f255cdd"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   A       3 non-null      int64\n 1   B       3 non-null      int64\n 2   C       3 non-null      int64\ndtypes: int64(3)\nmemory usage: 200.0 bytes\n"}},"pos":87,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"a8a0ee","input":"e = c - a\ne","metadata":{"id":"LHtHfJiFWETG"},"output":{"0":{"data":{"text/plain":"2"},"exec_count":3,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"9c380e","input":"# Gives you the names of all the columns, the number of rows in that column and a brief description of the values stored in those columns\ndata.describe()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"GiUDCEGpWETY","outputId":"ca2db3b5-b212-45ed-d69b-a126ef4d1047"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.5</td>\n      <td>4.5</td>\n      <td>7.5</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.5</td>\n      <td>5.5</td>\n      <td>8.5</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.0</td>\n      <td>6.0</td>\n      <td>9.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         A    B    C\ncount  3.0  3.0  3.0\nmean   2.0  5.0  8.0\nstd    1.0  1.0  1.0\nmin    1.0  4.0  7.0\n25%    1.5  4.5  7.5\n50%    2.0  5.0  8.0\n75%    2.5  5.5  8.5\nmax    3.0  6.0  9.0"},"exec_count":30,"output_type":"execute_result"}},"pos":88,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"bd348d","input":"# Going through a row 1 value at a time\nfor i in data['A']:\n    print(i)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QQ3tIuO1WETY","outputId":"477b6de0-c505-42af-ba69-393f9e6dd323"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n"}},"pos":90,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"6d3b86","input":"# going through the entire dataframe 1 value at a time\nfor col_name in data.columns:\n    for value in data[col_name]:\n        print(value)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d6z_1KYCWETZ","outputId":"959ba0f0-ec2d-4449-d6ca-657e8d7c1c4b"},"output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n4\n5\n6\n7\n8\n9\n"}},"pos":91,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"53bff6","input":"import numpy as np\nrand_data = pd.DataFrame({\"A\":np.random.rand(10), \"B\":np.random.rand(10), \"C\":np.random.rand(10)})\nrand_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"72JgFL1rWETZ","outputId":"58005ee1-599c-4e73-cac9-c80b49c8c6c6"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.991048</td>\n      <td>0.871162</td>\n      <td>0.409217</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.433903</td>\n      <td>0.385080</td>\n      <td>0.628434</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.901357</td>\n      <td>0.227156</td>\n      <td>0.430413</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.709254</td>\n      <td>0.591370</td>\n      <td>0.127309</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.477206</td>\n      <td>0.626389</td>\n      <td>0.739484</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          A         B         C\n0  0.991048  0.871162  0.409217\n1  0.433903  0.385080  0.628434\n2  0.901357  0.227156  0.430413\n3  0.709254  0.591370  0.127309\n4  0.477206  0.626389  0.739484"},"exec_count":33,"output_type":"execute_result"}},"pos":93,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"5b9701","input":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(8,5))\nsns.heatmap(data=rand_data.iloc[:,:].corr(),annot=True,fmt='.2f',cmap='coolwarm')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":324},"id":"bnLxeJIiWETZ","outputId":"55680a8d-6547-4c40-c6f9-13373c35a5e5"},"output":{"0":{"data":{"image/png":"e579895b7fa1b2ae236c98035dd315f361fa1b80","text/plain":"<Figure size 576x360 with 2 Axes>"},"exec_count":34,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":95,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"cd6e19","input":"# import the nltk (natural languages toolkit) package \nimport nltk\nnltk.download('punkt')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_XdQNTO2Xkzp","outputId":"54dc2be8-82b6-4fa4-8e65-782ffe210051"},"output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package punkt to /projects/7a0c9ef7-3361-4399-\n[nltk_data]     8d40-1da8ddeb76b0/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":35,"output_type":"execute_result"}},"pos":98,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"14bbc5","input":"nltk.download('gutenberg')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2XoIzVaAXr4u","outputId":"889e9d74-35b4-4a1e-978a-e3f2e837c679"},"output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package gutenberg to /projects/7a0c9ef7-3361-4\n[nltk_data]     399-8d40-1da8ddeb76b0/nltk_data...\n[nltk_data]   Package gutenberg is already up-to-date!\n"},"1":{"data":{"text/plain":"True"},"exec_count":36,"output_type":"execute_result"}},"pos":100,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"7ec12a","input":"files = nltk.corpus.gutenberg.fileids()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"204xtbuyXxuS","outputId":"16fc6967-56a7-4cb2-fac7-e1302d96d2c2"},"pos":102,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"f4ae68","input":"#print all the files in this list 1 by one with a for loop.","pos":104,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"ec6069","input":"md = nltk.corpus.gutenberg.words(\"melville-moby_dick.txt\")\nmd","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FVdU752MX0t4","outputId":"d5279391-7893-4d60-8334-847b3557e84f"},"output":{"0":{"data":{"text/plain":"['[', 'Moby', 'Dick', 'by', 'Herman', 'Melville', ...]"},"exec_count":39,"output_type":"execute_result"}},"pos":106,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"b20e31","input":"f = b * c\nf","metadata":{"id":"kxZN0zQuWETH"},"output":{"0":{"data":{"text/plain":"6"},"exec_count":4,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"94a156","input":"type(md)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qdxCgPAcYN9J","outputId":"b8ea6dbe-7d56-4bce-8635-7d1a0f48d777"},"output":{"0":{"data":{"text/plain":"nltk.corpus.reader.util.StreamBackedCorpusView"},"exec_count":40,"output_type":"execute_result"}},"pos":108,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"691eaa","input":"# How many tokens in the text:\nprint(\"Token count:\", len(md))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ys71aqIIYX7W","outputId":"f96ad161-df73-421b-8dad-4daf2b367140"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Token count: 260819\n"}},"pos":110,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"bafde3","input":"# What is the token at index 1000?\nprint(\"token at index 1000:\", md[1000])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b-rL7SEOYbYq","outputId":"ed3a8c2d-a303-4085-8bd8-6edb82096086"},"output":{"0":{"name":"stdout","output_type":"stream","text":"token at index 1000: said\n"}},"pos":111,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"788223","input":"# Slice from token 1400 to 1500\nprint(\"slice from 1400 to 1500:\", md[1400:1500])","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2JU3nUxtYeH9","outputId":"611470e9-89af-4703-a46c-be1ecd54b9b6"},"output":{"0":{"name":"stdout","output_type":"stream","text":"slice from 1400 to 1500: ['his', 'ponderous', 'tail', '.', '...', 'Their', ...]\n"}},"pos":112,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"a40d70","input":"md.count(\"whale\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CxfzDq8KYiKV","outputId":"64fb2cfa-78e9-46af-b408-4608fb52e2e4"},"output":{"0":{"data":{"text/plain":"906"},"exec_count":44,"output_type":"execute_result"}},"pos":114,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"df2e55","input":"md.count(\"boat\")","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"98QjuNPrYn2e","outputId":"92525b0c-2692-4346-c4a5-74d384977cbe"},"output":{"0":{"data":{"text/plain":"330"},"exec_count":45,"output_type":"execute_result"}},"pos":115,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"f86b43","input":"len(md)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BtgOZwNSYzZ2","outputId":"868c477a-0b5b-45a8-e11b-099f593f3ed2"},"output":{"0":{"data":{"text/plain":"260819"},"exec_count":46,"output_type":"execute_result"}},"pos":117,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"9bbcd8","input":"md_set = set(md)\nlen(md_set)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5n95IrceY3fA","outputId":"6a0dd2a4-2ec4-4619-8db4-edfae0d857cf"},"output":{"0":{"data":{"text/plain":"19317"},"exec_count":47,"output_type":"execute_result"}},"pos":119,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"c09c81","input":"len(md)/len(md_set)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yhT5snxxZDxM","outputId":"d61f9d25-c886-4ee4-965a-9ba9c07b3b4d"},"output":{"0":{"data":{"text/plain":"13.502044830977896"},"exec_count":48,"output_type":"execute_result"}},"pos":121,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"ff0bd5","input":"md_sents = nltk.corpus.gutenberg.sents(\"melville-moby_dick.txt\")","metadata":{"id":"QbfNprjiZJzb"},"pos":123,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"35e657","input":"g = a / b\ng","metadata":{"id":"c6bAIl-KWETH"},"output":{"0":{"data":{"text/plain":"0.5"},"exec_count":5,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"389612","input":"len(md)/len(md_sents)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5o-TGmNOZMKB","outputId":"1b014507-c136-4b10-c0b7-50d8cf2bc1c1"},"output":{"0":{"data":{"text/plain":"25.928919375683467"},"exec_count":50,"output_type":"execute_result"}},"pos":125,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"b8b346","input":"md_words_dist = nltk.FreqDist(w.lower() for w in md)\nprint(md_words_dist) #samples = number of unique words, outcomes = number of total words","metadata":{"id":"p3GYFFriaAR7"},"output":{"0":{"name":"stdout","output_type":"stream","text":"<FreqDist with 17231 samples and 260819 outcomes>\n"}},"pos":128,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"6db65d","input":"mostCommon = md_words_dist.most_common(10)\nmostCommon","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Huw0MhihaupP","outputId":"ad5bfcd9-b868-41cb-9580-3ee1905317d9"},"output":{"0":{"data":{"text/plain":"[(',', 18713),\n ('the', 14431),\n ('.', 6862),\n ('of', 6609),\n ('and', 6430),\n ('a', 4736),\n ('to', 4625),\n ('in', 4172),\n (';', 4072),\n ('that', 3085)]"},"exec_count":52,"output_type":"execute_result"}},"pos":130,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"80b923","input":"import plotly.express as px\ndf = pd.DataFrame(mostCommon)\ndf.rename(columns = {0:\"Word\", 1:\"Frequency\"}, inplace=True)\nfig = px.histogram(df, x = \"Word\", y = \"Frequency\")\nfig.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"vGqywkWybRPU","outputId":"e3bf6737-fc06-43ba-96be-8f64579c8910"},"output":{"0":{"data":{"iframe":"5e76d9f50e7267fb5c3daec7286a84337ed5bf33"},"exec_count":53,"output_type":"execute_result"}},"pos":132,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"744e43","input":"import time\ntime.time() # you will see this go up as you rerun it","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E5Q9WTKmWETa","outputId":"78b9874f-21d7-4532-e63c-d7eaed1adc34"},"output":{"0":{"data":{"text/plain":"1656350291.8829238"},"exec_count":54,"output_type":"execute_result"}},"pos":140,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"154609","input":"import random\nrandom.randint(0,5) # this gives one of the numbers between and including 0 and 5","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-zzMGuSSWETb","outputId":"5190472f-5504-4e86-d6b1-9341b9533fc0"},"output":{"0":{"data":{"text/plain":"4"},"exec_count":55,"output_type":"execute_result"}},"pos":142,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"7fc300","input":"from random import randint\nrandint(0,5) # now we can exclude the random. prefix","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kHpmQL8XWETb","outputId":"66eeef74-ed55-4e06-b5b6-33558f0b5a6a"},"output":{"0":{"data":{"text/plain":"5"},"exec_count":56,"output_type":"execute_result"}},"pos":146,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"ac8b18","input":"from time import time as t\nt()","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iBEfKpOdWETc","outputId":"b52eb47f-7a51-470a-f48d-d3c5a93f597b"},"output":{"0":{"data":{"text/plain":"1656350291.9154654"},"exec_count":57,"output_type":"execute_result"}},"pos":148,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"c4e17a","input":"a = 1\nb = 2\nc = 3\na","metadata":{"id":"EhZ2mV0_WETE"},"output":{"0":{"data":{"text/plain":"1"},"exec_count":58,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"9c2b90","input":"g = g*2 # the same thing works for /, +, and -\ng","metadata":{"id":"93FikwbPWETI"},"output":{"0":{"data":{"text/plain":"1.0"},"exec_count":64,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"dd85a7","input":"h = 6\ni = h ** 2\ni %= 12382798912\ni","metadata":{"id":"u9LpHsnzWETK"},"output":{"0":{"data":{"text/plain":"36"},"exec_count":67,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"2c677e","input":"h= 1.23\nk= h ** 1.3\nk","metadata":{"id":"j3AlCYqOWETL"},"output":{"0":{"data":{"text/plain":"1.3088101214257308"},"exec_count":68,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"46495f","input":"y = True\nx = False\nz = not x\nz","metadata":{"id":"nTwOY8csWETL"},"output":{"0":{"data":{"text/plain":"True"},"exec_count":69,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a891b5","input":"f/=2 # there is also +=, -=, and *=\nf","metadata":{"id":"7p-NSHUZWETJ"},"output":{"0":{"data":{"text/plain":"3.0"},"exec_count":7,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"2ed85e","input":"color_list = [\"blue\", \"black\", \"red\", \"green\", \"orange\"]\ncolor_list.append(\"pineapple\")\nprint(color_list)","metadata":{"id":"i0jELdvBWETP"},"output":{"0":{"name":"stdout","output_type":"stream","text":"['blue', 'black', 'red', 'green', 'orange', 'pineapple']\n"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":78,"id":"852506","input":"for a in range(11):\n    if a < 3:\n        print(a)\n        print(\"This is a small number\")\n    else:\n        print(a)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\nThis is a small number\n1\nThis is a small number\n2\nThis is a small number\n3\n4\n5\n6\n7\n8\n9\n10\n"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"998c85","input":"my_list = [1, 2, 3, 4, 5]","metadata":{"id":"6BAli8x3WETM"},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":85,"id":"70d82a","input":"item_1 = input(\"Item 1: \")\nitem_2 = input(\"Item 2: \") \nitem_3 = input(\"Item 3: \") \nthe_list = [item_1, item_2, item_3]\nfor item in the_list:\n    print(item)","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Item 1: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Item 2: "},"output_type":"stream","value":"2"},"2":{"name":"input","opts":{"password":false,"prompt":"Item 3: "},"output_type":"stream","value":"3"}}},"id":"urEPm7BjWETS"},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"Item 1: "},"output_type":"stream","value":"1"},"1":{"name":"input","opts":{"password":false,"prompt":"Item 2: "},"output_type":"stream","value":"2"},"2":{"name":"input","opts":{"password":false,"prompt":"Item 3: "},"output_type":"stream","value":"3"},"3":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"a77182","input":"my_list[2] # here, 2 is the index you are accessing","metadata":{"id":"qeMi2spXWETN"},"output":{"0":{"data":{"text/plain":"3"},"exec_count":9,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":91,"id":"601d54","input":"name = input(\"What is your name? \")[::-1]\nprint(name)","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"What is your name? "},"output_type":"stream","value":"Khalil"}}}},"output":{"0":{"name":"input","opts":{"password":false,"prompt":"What is your name? "},"output_type":"stream","value":"Khalil"},"1":{"name":"stdout","output_type":"stream","text":"lilahK\n"}},"pos":70,"type":"cell"}
{"cell_type":"code","exec_count":98,"id":"1bd61d","input":"a=1\nwhile a < 11:\n    if a % 2 == 0:\n        if a > 5 and a < 9:\n            print(a)\n            print(a)\n        else:\n            print(a)\n    a= a + 1\n    ","metadata":{"id":"4YQyBye8WETS"},"output":{"0":{"name":"stdout","output_type":"stream","text":"2\n4\n6\n6\n8\n8\n10\n"}},"pos":49,"type":"cell"}
{"cell_type":"markdown","id":"033927","input":"In the next block, create a while loop that prints out all of the even numbers between 1 and 10. Additionally, if the number is between 5 and 9, print the number out a second time.","metadata":{"id":"dwMvJ9TaWETS"},"pos":50,"type":"cell"}
{"cell_type":"markdown","id":"062b3c","input":"Create a few boolean variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.\n\n","metadata":{"id":"gFkrRajpWETL"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"095ccc","input":"If you are coding this on your own, you may need to install packages like pandas or nltk, which we will get into later, but there are many built in packages as well\n\n","metadata":{"id":"Z3_Ho7hqWETa"},"pos":138,"type":"cell"}
{"cell_type":"markdown","id":"0b9d39","input":"Below, create a list of your favorite colors. Then figure out how to `append` a new element to the end of the list \\(maybe google \"how to append an element to a list python\"\\). Finally change a value in the list to something new.\n\n","metadata":{"id":"noPfYk9kWETP"},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"179159","input":"**Then, we need to actually grab the 10 most common words from the frequency distribution.**\n","metadata":{"id":"-2hew8vyaoHM"},"pos":129,"type":"cell"}
{"cell_type":"markdown","id":"1907a1","input":"In the block below, create a function that takes in 2 numbers and returns True if the product of the numbers is positive and False in all other cases.\n\n","metadata":{"id":"vgtIxFzJWETU"},"pos":66,"type":"cell"}
{"cell_type":"markdown","id":"1c8656","input":"The goal of this notebook is to provide students with knowledge of the fundamentals of python. We will take a more interactive approach than most class room settings and ask the students to do some research on their own then bring their learnings back here to share with the class. ","metadata":{"id":"bYdWzO9_WETC"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"1ef132","input":"Functions act like variables but instead of storing a value, they store lines of code. Below we can see how a function is created and used.\n\n","metadata":{"id":"OUz7qBIeWETT"},"pos":55,"type":"cell"}
{"cell_type":"markdown","id":"1f1256","input":"In the following section we will be covering modules. Above, we leaned about functions and the power that they have. Modules let us use functions that other people have created to solve problems that we commonly incounter. For example, if we find that we frequently have to get a random number, instead of coding it every time, you could just import a function that either you or someone else created in the past. Basically, modules and importing lets us have access to the work of many other coders, making it a very powerful tool.","metadata":{"id":"RNzVnt9gWETV"},"pos":74,"type":"cell"}
{"cell_type":"markdown","id":"2300bf","input":"Additionally, we can use elif statements to add additional conditions to the structure.","metadata":{"id":"LwTBX9n4WETS"},"pos":44,"type":"cell"}
{"cell_type":"markdown","id":"237b47","input":"### One more module \\(time\\)\n\nTime allows us to access the current time\n","metadata":{"id":"DaKmNWCBWETa"},"pos":139,"type":"cell"}
{"cell_type":"markdown","id":"243e7c","input":"**We can see how many unique words are used in the book.**\n","metadata":{"id":"j-TK8QgNY-9s"},"pos":118,"type":"cell"}
{"cell_type":"markdown","id":"24ff5a","input":"Now lets create some visuals for our data! First we will create a dataframe of random numbers using numpy.","metadata":{"id":"8HS-nAMFWETZ"},"pos":92,"type":"cell"}
{"cell_type":"markdown","id":"2815b2","input":"**We can calculate the average number of times any given word is used in the book.**\n","metadata":{"id":"GfHyvle2Y_2X"},"pos":120,"type":"cell"}
{"cell_type":"markdown","id":"2d915b","input":"Next we will check out iterating through a dataframe.","metadata":{"id":"ArurL3AqWETY"},"pos":89,"type":"cell"}
{"cell_type":"markdown","id":"342ecd","input":"In the block below, we will make a while loop that runs 5 times. For while loops, we can't specify how long they will run for ahead of time so its important for us to create an achievable exit condition. An exit condition is just the condition that will cause the code to stop running. This is checked every time, immediatly before the code runs or reruns. We want to make sure that this condition will eventually happen, otherwise the code will run until something crashes or we manually close it","metadata":{"id":"2GdmHRv_WETR"},"pos":38,"type":"cell"}
{"cell_type":"markdown","id":"344a7c","input":"Now its your turn. Either break up into 3 teams and have each team solve one of the blocks or solve them all together.","metadata":{"id":"FCQnlQBvWETS"},"pos":46,"type":"cell"}
{"cell_type":"markdown","id":"371816","input":"We can add else statements to the above. An else statement is what will be run if the original statement is false.","metadata":{"id":"Uv9lAWJPWETR"},"pos":42,"type":"cell"}
{"cell_type":"markdown","id":"395574","input":"### Modules (Pandas and NLTK)\n\n\n\n","metadata":{"id":"VGto2yQaWETV"},"pos":73,"type":"cell"}
{"cell_type":"markdown","id":"3ce927","input":"There are tons of different types of variables we can make. For this next section, we will ask the students to go out and figure out how to create the following types of variable: strings, floats and booleans. Once you have created these variables, try the same operations we used above and see what they do.","metadata":{"id":"3JgPbmG9WETK"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"3ee9f1","input":"Now, we need to create the histogram of these 10 most common words! We will need to import plotly, create a pandas dataframe from the most common words, rename the columns of the dataframe so they are not integers, and then use their histogram function to create the graph!\n\n","metadata":{"id":"xLB1BUvQblY6"},"pos":131,"type":"cell"}
{"cell_type":"markdown","id":"406a5c","input":"The first element in the list is at index 0, then the second element is at index 1 and so on.\n\n","metadata":{"id":"AtMJU7MAWETN"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"482b26","input":"**We access functions in the nltk package with dotted notation. The first function we'll use is one that downloads text, so we have some examples to work with. This function is nltk.download\\(\\), and we can pass it the name of a specific corpus, such as gutenberg. Downloads may take a little time…**\n","metadata":{"id":"oiU7sqg6XmOR"},"pos":99,"type":"cell"}
{"cell_type":"markdown","id":"4ee1d4","input":"Create a few string variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","metadata":{"id":"c6QVR8YVWETK"},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"4f8dac","input":"Variables work by assigning a value to a specific word or string of characters. It can be done using the \"=\" sign. This assigns whatever is on the right the string of characters on the left. We'll go ahead and try assigning a few variables in the next block.","metadata":{"id":"k6IcCsWSWETD"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"507923","input":"Now for the visuals, first we will check out a general correlation chart","metadata":{"id":"OyQQksJcWETZ"},"pos":94,"type":"cell"}
{"cell_type":"markdown","id":"545a99","input":"In the block below, create a function that takes in a string and returns the string in reverse order. For example, if the input was \"Hello\" the output should be \"olleH\"\n\n","metadata":{"id":"vAUzVrXWWETU"},"pos":68,"type":"cell"}
{"cell_type":"markdown","id":"54f2a6","input":"Additionally, functions can take in one or multiple values to use in their code, as we can see below.\n\n","metadata":{"id":"o7jxYRpZWETT"},"pos":59,"type":"cell"}
{"cell_type":"markdown","id":"58a3d1","input":"random allows us to get random numbers\n\n","metadata":{"id":"mbeP1vAgWETa"},"pos":141,"type":"cell"}
{"cell_type":"markdown","id":"59adea","input":"### _**Visualizations**_\n\n**Let's now extract the 10 most common words and create a histogram of it using plotly!**\n","metadata":{"id":"xo_HnffiZs0_"},"pos":126,"type":"cell"}
{"cell_type":"markdown","id":"5eb6d9","input":"First, we'll have to import it. It is common practice to import pandas as pd but you are free to import it as you see fit.","metadata":{"id":"f68LsPZdWETX"},"pos":76,"type":"cell"}
{"cell_type":"markdown","id":"63b635","input":"### For loops, while loops, and if statements \n\n","metadata":{"id":"FJL9Na0oWETQ"},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"67e8bf","input":"**We can get an idea of how long the book is by seeing how many items are in our list.**\n","metadata":{"id":"TUK8oFHoYxGd"},"pos":116,"type":"cell"}
{"cell_type":"markdown","id":"6afe57","input":"**Let's get all of the files of the gutenberg package into a list!**\n","metadata":{"id":"a6AT9VnDX-TI"},"pos":101,"type":"cell"}
{"cell_type":"markdown","id":"6da8a4","input":"# Python Basics","metadata":{"id":"wveUD4IuWES_"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"6e294b","input":"finally, as we did with the numpy module, we can rename the function","metadata":{"id":"W3y1Hb4KWETb"},"pos":147,"type":"cell"}
{"cell_type":"markdown","id":"700d1e","input":"**We can count how many times a word appears in the book.**\n","metadata":{"id":"2Fv2zNtFYkpZ"},"pos":113,"type":"cell"}
{"cell_type":"markdown","id":"71d236","input":"Lists work similarly to the variables we created above but store multiple values. We'll cover the types mentioned above then ask the students to try and create their own versions of them.\n\n","metadata":{"id":"_cJOr86EWETM"},"pos":22,"type":"cell"}
{"cell_type":"markdown","id":"768e45","input":"Find a built in module and use it here: (hint: try math)","metadata":{"id":"NJcbJBPAWETb"},"pos":143,"type":"cell"}
{"cell_type":"markdown","id":"7bd5a7","input":"### Functions\n\n","metadata":{"id":"2wpmVZZGWETT"},"pos":54,"type":"cell"}
{"cell_type":"markdown","id":"7f7198","input":"In the block below, create a function that takes in a list and prints out each element 1 at a time. For example, if the input was ['Dog', 'Cat', 'Hamster'], the output should be\n\nDog\n\nCat\n\nHamster\n\n","metadata":{"id":"4iYc3d29WETV"},"pos":71,"type":"cell"}
{"cell_type":"markdown","id":"81e057","input":"Now its your turn. \n\n","metadata":{"id":"lPiBKyGIWETP"},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"83d7e2","input":"This can get quite annoying with longer variable names, so we can do the following","metadata":{"id":"mKQ01CgHWETJ"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"86d515","input":"**This is a datatype that is specific to nltk. You will see below that you can do many things to this just like a list.**\n","metadata":{"id":"lrIvknKZYXPp"},"pos":109,"type":"cell"}
{"cell_type":"markdown","id":"8edda7","input":"Now its your turn! You can either work on each of the following challenges in teams of 2 or walk through each one as a group. In any case, it is recommended to look at them at a high level together so that everyone understands the concepts in each section.","metadata":{"id":"iByPTgY_WETU"},"pos":65,"type":"cell"}
{"cell_type":"markdown","id":"910bb0","input":"**We can calculate the average number of words per sentence in the book**\n","metadata":{"id":"pt_M8mjwZOnQ"},"pos":124,"type":"cell"}
{"cell_type":"markdown","id":"9622b3","input":"First, we need to create a frequency distribution of all of the words in Melville.\n\n","metadata":{"id":"dlyKwuZJaNCm"},"pos":127,"type":"cell"}
{"cell_type":"markdown","id":"9c0592","input":"### _Text Processing Basics_\n\nNext, let's get all the words in Moby Dick by Melville!\n\n","metadata":{"id":"gGqU_WVrYGq4"},"pos":105,"type":"cell"}
{"cell_type":"markdown","id":"9c7313","input":"Sometimes we want to update the value of one variable, so we can do this","metadata":{"id":"i0fdrGM6WETI"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"9d9538","input":"Whenever the computer sees the function being used, it automatically runs the code stored inside of that function.","metadata":{"id":"TsJIer9ZWETT"},"pos":58,"type":"cell"}
{"cell_type":"markdown","id":"a12c13","input":"Next, we will look at how to make a list run a specific number of times.","metadata":{"id":"zHaJuslXWETQ"},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"a37678","input":"**We can look at the book as a lists of sentences.**\n","metadata":{"id":"p3sIsctwZHHW"},"pos":122,"type":"cell"}
{"cell_type":"markdown","id":"a5c5ad","input":"In the next block, create a for loop that counts from 0 to 10 and prints out each number. Additionally, if the number is less than 3, print out \"This is a small number\".","metadata":{"id":"-dCE-_kUWETS"},"pos":47,"type":"cell"}
{"cell_type":"markdown","id":"a645c9","input":"### Now, let's move on to NLTK!\n\n","metadata":{"id":"cv2rRWBUXZSo"},"pos":96,"type":"cell"}
{"cell_type":"markdown","id":"adf092","input":"To access a specific item from the list, you would do the following.","metadata":{"id":"H8FL3gtKWETM"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"af610e","input":"**This looks like a list, but isn't. We can use the type\\(\\) function to see what datatype it is**\n","metadata":{"id":"Mo_VghfeYRF-"},"pos":107,"type":"cell"}
{"cell_type":"markdown","id":"b078fe","input":"**TODO: Could you use a for loop to print all the files in this list?**\n","pos":103,"type":"cell"}
{"cell_type":"markdown","id":"b72d3a","input":"We can also perform basic algebra to these variables and save the output to a new variable","metadata":{"id":"tmahXoIQWETF"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"bd8088","input":"### _Your Turn_\n\nNow, use a different book from the gutenberg package and explore the different things you can do with nltk below!\n","metadata":{"id":"O8JeZ43rdO6f"},"pos":133,"type":"cell"}
{"cell_type":"markdown","id":"bddabb","input":"Alternatively you can look at just 1 row at a time by calling it similarly to a dictionary","metadata":{"id":"mIy96zFsWETX"},"pos":83,"type":"cell"}
{"cell_type":"markdown","id":"c09868","input":"You can also get various details about the dataframe with the following functions.","metadata":{"id":"A5lIbk7kWETY"},"pos":85,"type":"cell"}
{"cell_type":"markdown","id":"c1d7dc","input":"### Lists\n\n","metadata":{"id":"30PWO9XBWETL"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"ca5336","input":"Let's check out a little bit about pandas. Pandas is an awesome module that helps us deal with large amounts of data in an easy to understand way. Below we will look at some of its many functions","metadata":{"id":"_6tFEZ7mWETW"},"pos":75,"type":"cell"}
{"cell_type":"markdown","id":"cacf60","input":"Create a few float variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","metadata":{"id":"JvIvmkSoWETK"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"cd3c62","input":"Finnally, functions can have a \"return\" statement. This is what the function sends back to the place it was called. You can think of functions like black boxes where the parameters in the parentheses are the input and the return statement is the output. This output can be saved to a variable to be used later. We will redefine the add_numbers function from above using a return statement to show this off.","metadata":{"id":"b6IH_gM9WETU"},"pos":62,"type":"cell"}
{"cell_type":"markdown","id":"d78795","input":"In the next block, ask the user to input 3 items and add them all to a list. Then. create a loop that prints out each item that the user entered.\n\n","metadata":{"id":"sh-yUSoRWETS"},"pos":52,"type":"cell"}
{"cell_type":"markdown","id":"dbb781","input":"You may notice that we have to call the function we need by placing it after the module connected by a dot\n\nBut many times, that is inconvenient and we can get around it like this","metadata":{"id":"_FIFwuKHWETb"},"pos":145,"type":"cell"}
{"cell_type":"markdown","id":"dc8cb1","input":"Our dataframe is pretty small so it's easy to show the whole thing in the output, but for larger dataframes it is important to only show a few of the rows. To do this, we can use the head(x) function to show the first x rows of the dataframe or tail(x) to show the last x number of rows","metadata":{"id":"Xv3SvtRjWETX"},"pos":80,"type":"cell"}
{"cell_type":"markdown","id":"de2759","input":"Now to create a sample dataframe. Dataframes are the main feature of pandas. You can think of them as more advanced dictionaries.","metadata":{"id":"8BynYT2qWETX"},"pos":78,"type":"cell"}
{"cell_type":"markdown","id":"e47cf9","input":"First up, lists. you can create a list with the following code.\n\n","metadata":{"id":"Ic5Jza-uWETM"},"pos":23,"type":"cell"}
{"cell_type":"markdown","id":"e853f0","input":"Now for if statements. The if-elif-else statement is used to conditionally execute a statement or a block of statements. Conditions can be true or false, execute one thing when the condition is true, something else when the condition is false.","metadata":{"id":"TXLE7UYUWETR"},"pos":40,"type":"cell"}
{"cell_type":"markdown","id":"e9ed51","input":"### Variables\n\n","metadata":{"id":"mRCss23VWETD"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"ea85f8","input":"NLTK stands for Natural Language Toolkit. It is a leading platform for building Python programs to work with human language data. It also comes with pre-packed text data.","metadata":{"id":"_Co-d_39Xcsf"},"pos":97,"type":"cell"}
{"cell_type":"markdown","id":"eb47d6","input":"Next, we'll take a look at while loops. In general, you can make a while loop do anything that a for loop can do but with slightly different syntax, so if you find youself understanding while loops better than for loops, you can just focus on using while loops. ","metadata":{"id":"_tZzK7mQWETQ"},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"f100c9","input":"We will learn more about for loops in the next lesson. For now, we will use them to go through a list and print out each element.","metadata":{"id":"jwk4fKYdWETQ"},"pos":33,"type":"cell"}
{"id":0,"time":1656524095840,"type":"user"}
{"last_load":1656510121377,"type":"file"}