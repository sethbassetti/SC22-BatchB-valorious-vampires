{"backend_state":"running","connection_file":"/projects/7a0c9ef7-3361-4399-8d40-1da8ddeb76b0/.local/share/jupyter/runtime/kernel-4a88fa3a-8b38-47d7-846f-38eb1c9f9359.json","kernel":"nlp_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"interpreter":{"hash":"335ee12212264728feb72f243af72c5a8ea26c832f07e1f651ce9e17c7ceae23"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1656524527677,"exec_count":1,"id":"1fb7b4","input":"print(tenMostFrequent)","kernel":"nlp_env","output":{"0":{"ename":"NameError","evalue":"name 'tenMostFrequent' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mtenMostFrequent\u001b[49m)\n","\u001b[0;31mNameError\u001b[0m: name 'tenMostFrequent' is not defined"]}},"pos":32,"start":1656524527063,"state":"done","type":"cell"}
{"cell_type":"code","end":1656524655322,"exec_count":5,"id":"ddbf0a","input":"''' Training the Word2Vec model. You should pass:\n1. a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence\n2. min_count=1 --> Ignores all words with total frequency lower than 1 (i.e., include everything).\n'''\nfrom gensim.test.utils import common_texts\nfrom gensim.models import Word2Vec\n\nmodel = Word2Vec(sentences = common_texts, vector_size =100, window = 5, min_count = 1, workers = 4)\n\ntenMostFrequent = model.wv.index_to_key[:10]\n\nmodel.save(\"word2vec.model\")\n\nmodel = Word2Vec.load(\"word2vec.model\")\n\nprint(tenMostFrequent)","kernel":"nlp_env","output":{"0":{"name":"stdout","text":"['system', 'graph', 'trees', 'user', 'minors', 'eps', 'time', 'response', 'survey', 'computer']\n"}},"pos":31,"start":1656524655292,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0adabb","input":"# code to print a wordcloud for your sentences\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50, \n                        random_state=42\n                        ).generate(str(sentences))\nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1f10b3","input":"print(sentences[:10]) ","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"291f69","input":"","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"299647","input":"","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"49eeaf","input":"    ### Finding the most similar words in the model ###\nsims = model.wv.most_similar(\"sketch\", topn=10)","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5a467e","input":"similar1, similar2","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5be8ad","input":"'''\ndefine a function called \"remove_stopwords\" that takes in a list of the sentences of the text and returns one that doesn't have any stopwords.\n'''\ndef remove_stopwords(sentences):\n    ### Some code goes here. Hint: You may have to look up how to remove stopwords in NLTK if you get stuck. ###\n    filteredSentence = \"\"\n    stopWords = set(stopwords.words('english'))\n    words = nltk.word_tokenize(sentences)\n    for w in words:\n        if w not in stopWords:\n        filteredSentence.append(w)\n    return filteredSentence\n\n###Then actually apply your function###\nsentences = remove_stopwords(sentences)\nprint(sentences[:10]) #Check if it worked correctly. Are all stopwords removed?","pos":14,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"60f13c","input":"# POS Tagging example\n# CC - coordinating conjunction\n# NN - noun, singular (cat, tree)\n#all_words = nltk.word_tokenize(text)  ###If we want to look at part of speech taking before we stem/lem\n\ntagged_words = nltk.pos_tag(all_words)\n##Creates a list of lists where each element of the list is [word,partofspeech abbreviation]\n\n# Tagged word paragraph\nword_tags = []\nfor tw in tagged_words:\n    word_tags.append(tw[0]+\"_\"+tw[1])\n\ntagged_paragraph = ' '.join(word_tags)\n\n'''\nYour code here: print the first 1000 characters of tagged_paragraph.\n'''\nprint(tagged_paragraph[:1000])","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"63cfeb","input":"from nltk.stem import WordNetLemmatizer\n    \n## Step 1: Import the lemmatizer\nlemmatizer = WordNetLemmatizer()\n\n'''\nYour code here: Define a function called \"lem_sentences\" that: loops through the sentences, split the sentences up by words and applies \"lemmatizer.lemmatize\" to each word and then join everything back into a sentence\n'''\n##Similar to stopwords: For loop through the sentences, split by words and apply \"lemmatizer.lemmatize\" to each word and join back into a sentence\ndef lem_sentences(sentences):\n    lemmatizedSentence = \"\"\n    for sentence in sentences:\n        for word in sentence:\n            lemmatizer.lemmatize(word)\n            lemmatizedSentence = lemmatizedSentence.join(word)\n        sentence = lemmatizedSentence\n    return sentences\n\nsentences = lem_sentences(sentences)\nprint(sentences[:10])","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"67bf34","input":"'''\ndefine a function called \"remove_punctuation\" that removes punctuation from the sentences.\n'''\ndef remove_punctuation(sentences):\n\n    ### Some code goes here. Hint: Try looking up how to remove stopwords in NLTK if you get stuck. ###\n    for sent in sentences:\n        while sent.index(\".\") != -1 or sent.index(\"!\") != -1 or sent.index(\"?\") != 1:\n            if sent.index(\".\") != -1\n                index = sent.index(\".\")\n                sent.replace(\".\", '')\n            if sent.index(\"!\") != -1\n                index = sent.index(\"!\")\n                sent.replace(\"!\", '')\n            if sent.index(\"?\") != -1\n                index = sent.index(\"?\")\n                sent.replace(\"?\", '')\n\n    return sentences\nsentences = remove_punctuation(sentences)\nprint(sentences[:10]) #eliminating all punctuation.","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"830ecc","input":"# reFetching the data\nlame_text = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    lame_text += paragraph.text","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"89e100","input":"#Let's go ahead and create a list that's formatted how word2vec needs:\n    # a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence (after preprocessing)\n    sentencesList = []\n    for sentence in sentences:\n        words = []\n        sentence = nltk.word_tokenize(sentence)\n        for word in sentence:\n            words.append(word)\n        sentences.append(words)\n    return sentencesList","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9e7e96","input":"text[:100]","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a9dd6f","input":"### Finding the most similar words in the model but... you get the idea ###\n\n","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"acfd22","input":"print(words[:10])","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"af86a3","input":"'''\nDoing the same without removing stop words or lemming\n'''\n# tokenize the text using sent_tokenize\n\n# from this list of sentences, create a list of lists where the ith entry in the list is the word tokenizaiton of the ith sentence (after preprocessing)","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bab817","input":"# Finding a vector of a word, but badly","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cc52dc","input":"nltk.download('averaged_perceptron_tagger')","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cf05a6","input":"# print the tokenized list of lists\nfor sentence in sentencesList:\n    print(sentence)","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"db5165","input":"# Install gensim - pip install gensim\nimport nltk\nfrom gensim.models import Word2Vec\nimport matplotlib.pyplot as plt\nnltk.download('punkt')\nfrom wordcloud import WordCloud","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e443dd","input":"# Training the Word2Vec model (same code as before), but one change: use our lame data that was not preprocessed\n\n# Try printing this after training the model.\nwords = model.wv.index_to_key\nprint(words[:10])","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f554d0","input":"# Redo the word cloud but set stopwords to empty so it looks really bad\nwordcloud = WordCloud(\n                        background_color='white',\n                        max_words=100,\n                        max_font_size=50, \n                        random_state=42, ###SET STOPWORDS = [] and/or include_numbers = True or you will get the same thing!!!\n                        stopwords = [],\n                        include_numbers = True).generate(str(lame_sentences)) \nfig = plt.figure(1)\nplt.figure(figsize=(10,10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fa04c1","input":"    # Finding Word Vectors - print word vectors for certain words in your text\nwordVectors = model.wv\nprint(wordVectors)","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"2b256b","input":"# Install NLTK - pip install nltk\nimport nltk\nnltk.download('wordnet')\nnltk.download('punkt')","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package wordnet to /projects/7a0c9ef7-3361-439\n[nltk_data]     9-8d40-1da8ddeb76b0/nltk_data...\n[nltk_data]   Unzipping corpora/wordnet.zip.\n"},"1":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package punkt to /projects/7a0c9ef7-3361-4399-\n[nltk_data]     8d40-1da8ddeb76b0/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n"},"2":{"data":{"text/plain":"True"},"exec_count":1,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"a5826a","input":"from nltk.stem import PorterStemmer\n\nstemmer = PorterStemmer()\n# try each of the words below\nstemmer.stem('troubled')\nstemmer.stem('trouble')\nstemmer.stem('troubling')\nstemmer.stem('troubles')","output":{"0":{"data":{"text/plain":"'troubl'"},"exec_count":13,"output_type":"execute_result"}},"pos":17,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"891dfd","input":"'''\nYour code here:\nDefine a function called \"stem_sentences\" that takes in a list of sentences and returns a list of stemmed sentences.\n'''\ndef stem_sentences(sentences):\n    ### Some code goes here. Hint: Try looking up how to stem words in NLTK if you get stuck (or simply use the example above and run stemmer in a loop!). ###\n    for sentence in sentences:\n        stemmer.stem(sentence)\n    return sentences","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"cc76b5","input":"\nprint(stemmed_sentences[:10])","output":{"0":{"ename":"NameError","evalue":"name 'stemmed_sentences' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [15]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mstemmed_sentences\u001b[49m[:\u001b[38;5;241m10\u001b[39m])\n","\u001b[0;31mNameError\u001b[0m: name 'stemmed_sentences' is not defined"]}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"9422b7","input":"import urllib\nimport bs4 as bs\nimport re","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3b199b","input":"# We will read the contents of the Wikipedia article \"Global_warming\" as an example, please feel free to use your own! You can use the url below:\nurl = 'https://en.wikipedia.org/wiki/Global_warming' # you can change this to use other sites as well.\n\n# We can open the page using \"urllib.request.urlopen\" then read it using \".read()\"\nsource = urllib.request.urlopen(url).read()\n\n# Beautiful Soup is a Python library for pulling data out of HTML and XML files.\n# you may need to install a parser library --> \"!pip3 install lxml\"\n# Parsing the data/creating BeautifulSoup object\n\nsoup = bs.BeautifulSoup(source,\"html.parser\") \n\n# Fetching the data\ntext = \"\"\nfor paragraph in soup.find_all('p'): #The <p> tag defines a paragraph in the webpages\n    text += paragraph.text\n\n# Preprocessing the data\n\ntext = re.sub(r'\\[[0-9]*\\]',' ',text) # [0-9]* --> Matches zero or more repetitions of any digit from 0 to 9\ntext = text.lower() #everything to lowercase\ntext = re.sub(r'\\W^.?!',' ',text) # \\W --> Matches any character which is not a word character except (.?!)\ntext = re.sub(r'\\d',' ',text) # \\d --> Matches any decimal digit\ntext = re.sub(r'\\s+',' ',text) # \\s --> Matches any characters that are considered whitespace (Ex: [\\t\\n\\r\\f\\v].)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"d1eeae","input":"'''\nYour code here: Tokenize the words from the data and set it to a variable called words.\nHint: how to this might be on the very home page of NLTK!\n'''\n\nwords = nltk.word_tokenize(text)\n","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8fb636","input":"'''\nYour code here: Tokenize the sentences from the data  and set it to a variable called sentences.\nHint: try googling how to tokenize sentences in NLTK!\n'''\n\nsentences = nltk.sent_tokenize(text)\n","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"84d5ae","input":"print(sentences[:10])","output":{"0":{"ename":"NameError","evalue":"name 'sentences' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [7]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43msentences\u001b[49m[:\u001b[38;5;241m10\u001b[39m])\n","\u001b[0;31mNameError\u001b[0m: name 'sentences' is not defined"]}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"1091b2","input":"nltk.download('stopwords')\nfrom nltk.corpus import stopwords","output":{"0":{"name":"stderr","output_type":"stream","text":"[nltk_data] Downloading package stopwords to /projects/7a0c9ef7-3361-4\n[nltk_data]     399-8d40-1da8ddeb76b0/nltk_data...\n[nltk_data]   Unzipping corpora/stopwords.zip.\n"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"02f39d","input":"## NLP Part 2 - Stopwords and Punctuation\n\nNow we are going to work to remove stopwords and punctuation from our data. Why do you think we are going to do this? Do some research if you don't know yet. \n\n","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"083b93","input":"","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"11699f","input":"## Reflection\n\nHow important do you think proper preprocessing in NLP is?\n\nextremely, otherwise it wont work at all\n","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"133a6c","input":"## NLP Part 4 - POS Tagging\nParts of speech tagging is marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"1d5ee0","input":"# Word2Vec Model Visualization\n\n","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"3f9bcb","input":"## NLP Part 0 - Get some Data!\n\nThis section's code is mostly given to you as a review for how you can scrape and manipulate data from the web. ","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"482afc","input":"# Natural Language Processing using NLTK","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"54eae7","input":"### Why did we do all this work?\n\n","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"72b6ff","input":"## Testing our model\n\n","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"8238a7","input":"## NLP Part 1 - Tokenization of paragraphs/sentences\n\nIn this section we are going to tokenize our sentences and words. If you aren't familiar with tokenization, we recommend looking up \"what is tokenization\". \n\nYou should also spend time on the [NLTK documentation](https://www.nltk.org/). If you're not sure how to do something, or get an error, it is best to google it first and ask questions as you go!\n\n","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"a3a240","input":"## NLP Part 3b - Lemmatization\n\nLemmatization considers the context and converts the word to its meaningful base form. There is a cool tutorial and definition of lemmatization in NLTK [here](https://www.geeksforgeeks.org/python-lemmatization-with-nltk/).\n\n","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"a667d9","input":"## NLP Part 3a - Stemming the words\n\nStemming is the process of reducing inflected (or sometimes derived) words to their word stem, base or root form. There is an example below!\n\n","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"add8c3","input":"## Training the Word2Vec model\n\nFor this part you may want to follow a guide [here](https://radimrehurek.com/gensim/models/word2vec.html). ","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"c75cc7","input":"","pos":50,"type":"cell"}
{"id":0,"time":1656523091267,"type":"user"}
{"last_load":1656523045685,"type":"file"}